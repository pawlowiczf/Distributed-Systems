//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `PermissionsVerifierF.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Glacier2_PermissionsVerifierF_h__
#define __Glacier2_PermissionsVerifierF_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifndef GLACIER2_API
#   if defined(ICE_STATIC_LIBS)
#       define GLACIER2_API /**/
#   elif defined(GLACIER2_API_EXPORTS)
#       define GLACIER2_API ICE_DECLSPEC_EXPORT
#   else
#       define GLACIER2_API ICE_DECLSPEC_IMPORT
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Glacier2
{

class PermissionsVerifier;
class PermissionsVerifierPrx;
class SSLPermissionsVerifier;
class SSLPermissionsVerifierPrx;

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

/// \cond INTERNAL
namespace Glacier2
{

using PermissionsVerifierPtr = ::std::shared_ptr<PermissionsVerifier>;
using PermissionsVerifierPrxPtr = ::std::shared_ptr<PermissionsVerifierPrx>;

using SSLPermissionsVerifierPtr = ::std::shared_ptr<SSLPermissionsVerifier>;
using SSLPermissionsVerifierPrxPtr = ::std::shared_ptr<SSLPermissionsVerifierPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace Glacier2
{

class PermissionsVerifier;
/// \cond INTERNAL
GLACIER2_API void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< PermissionsVerifier>&);
GLACIER2_API ::IceProxy::Ice::Object* upCast(PermissionsVerifier*);
/// \endcond

class SSLPermissionsVerifier;
/// \cond INTERNAL
GLACIER2_API void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< SSLPermissionsVerifier>&);
GLACIER2_API ::IceProxy::Ice::Object* upCast(SSLPermissionsVerifier*);
/// \endcond

}

}

namespace Glacier2
{

class PermissionsVerifier;
/// \cond INTERNAL
GLACIER2_API ::Ice::Object* upCast(PermissionsVerifier*);
/// \endcond
typedef ::IceInternal::Handle< PermissionsVerifier> PermissionsVerifierPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::PermissionsVerifier> PermissionsVerifierPrx;
typedef PermissionsVerifierPrx PermissionsVerifierPrxPtr;
/// \cond INTERNAL
GLACIER2_API void _icePatchObjectPtr(PermissionsVerifierPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class SSLPermissionsVerifier;
/// \cond INTERNAL
GLACIER2_API ::Ice::Object* upCast(SSLPermissionsVerifier*);
/// \endcond
typedef ::IceInternal::Handle< SSLPermissionsVerifier> SSLPermissionsVerifierPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::SSLPermissionsVerifier> SSLPermissionsVerifierPrx;
typedef SSLPermissionsVerifierPrx SSLPermissionsVerifierPrxPtr;
/// \cond INTERNAL
GLACIER2_API void _icePatchObjectPtr(SSLPermissionsVerifierPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
